#name: CI
#on:
#  pull_request:
#    branches:
 #     - "main"

#jobs:
 # flutter-test:
 #   name: Run flutter test and analyze
  #  runs-on: ubuntu-latest
  #  steps:
   #   - name: Check out repository
    #    uses: actions/checkout@v3
    #  - name: Setup java
     #   uses: actions/setup-java@v1
      #  with:
      #    java-version: "1.x"
      #- name: Setup flutter
      #  uses: subosito/flutter-action@v2
       # with:
        #  channel: "stable"
        #  cache: "true"
     # - run: flutter pub get
      #- run: flutter analyze
     # - run: flutter test

# Name of the workflow
name: Build
# Controls what will trigger the workflow.
# Change it to your needs.
on:
  # A new push to the "main" branch.
  push:
    branches: [ "main" ]
  # A new pull request to the "main" branch.
  pull_request:
    branches: [ "main" ]
    # Allows to trigger the workflow from GitHub interfaces.
    workflow_dispatch:

# A single workflow can have multiple jobs.
jobs:
  # 'A new job is defined with the name: "build_android"
  build_android:
    # Defines what operating system will be used for the actions.
    # For android, we will use Linux GitHub-Hosted Runner.
    runs-on: ubuntu-22.04
    # Defines what step should be passed for successful run
    steps:
      # Checkout to the selected branch
      - name: Checkout
        uses: actions/checkout@v3
      # Download and install flutter packages
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          # Define which stable flutter version should be used
          flutter-version: "3.7.0"
          channel: 'stable'
          # Enables cache for flutter packages
          # Speed up the process
          cache: true
      # Get Flutter project dependencies
      - name: Get dependencies
        run: flutter pub get
      - name: Build release app bundle
        run: flutter build appbundle
      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: build/app/outputs/bundle/release/
          signingKeyBase64: ${{ secrets.KEYSTORE_BASE64 }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      #- name: Upload to Play Store (Internal Testing)
       # uses: r0adkll/upload-google-play@v1.0.18
       # with:
        #  serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
        #  packageName: com.testgroup.flutter_github_actions_android
        #    releaseFiles: ${{steps.sign_app.outputs.signedReleaseFile}}
         #     mappingFile: ./build/app/outputs/mapping/release/mapping.txt
         # track: internal

      # 4
      - uses: actions/upload-artifact@master
        with:
          name: release.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
      # 5
      - uses: actions/upload-artifact@master
        with:
          name: mapping.txt
          path: app/build/outputs/mapping/release/mapping.txt

      - uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          branch: floss
          name: release.apk
          path: downloads
          if_no_artifact_found: fail
      # 2
      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::APP_$(date +"%Y.%m.%d_%H-%M")"
      # 3
      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: downloads/release-signed.apk